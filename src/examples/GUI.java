/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package examples;

import java.io.IOException;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author tasos
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ServerjPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ServerIPAddress = new javax.swing.JTextField();
        ServerPort = new javax.swing.JTextField();
        ServerConnect = new javax.swing.JButton();
        ServerMessages = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ClientjPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ClientMessages = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        ClientIPAddress = new javax.swing.JTextField();
        ClientPort = new javax.swing.JTextField();
        ClientConnect = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ClientFileName = new javax.swing.JTextField();
        CleintFolderPath = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ClientPayload = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(102, 255, 255));

        jLabel1.setText("IP Address :");

        jLabel2.setText("Port :");

        ServerIPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerIPAddressActionPerformed(evt);
            }
        });

        ServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerPortActionPerformed(evt);
            }
        });

        ServerConnect.setText("Connect");
        ServerConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerConnectActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        ServerMessages.setViewportView(jTextArea1);

        javax.swing.GroupLayout ServerjPanelLayout = new javax.swing.GroupLayout(ServerjPanel);
        ServerjPanel.setLayout(ServerjPanelLayout);
        ServerjPanelLayout.setHorizontalGroup(
            ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerjPanelLayout.createSequentialGroup()
                .addGroup(ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ServerjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ServerIPAddress)
                            .addComponent(ServerPort, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                    .addGroup(ServerjPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(ServerConnect))
                    .addGroup(ServerjPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ServerMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        ServerjPanelLayout.setVerticalGroup(
            ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ServerIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ServerjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ServerConnect)
                .addGap(18, 18, 18)
                .addComponent(ServerMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Server", ServerjPanel);

        jLabel3.setText("IP Address : ");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        ClientMessages.setViewportView(jTextArea2);

        jLabel4.setText("Port :");

        ClientIPAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientIPAddressActionPerformed(evt);
            }
        });

        ClientPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientPortActionPerformed(evt);
            }
        });

        ClientConnect.setText("Connect");
        ClientConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientConnectActionPerformed(evt);
            }
        });

        jLabel5.setText("FolderName :");

        jLabel6.setText("FileName : ");

        jLabel7.setText("Payload :");

        javax.swing.GroupLayout ClientjPanelLayout = new javax.swing.GroupLayout(ClientjPanel);
        ClientjPanel.setLayout(ClientjPanelLayout);
        ClientjPanelLayout.setHorizontalGroup(
            ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientjPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClientMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ClientjPanelLayout.createSequentialGroup()
                        .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(ClientjPanelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(35, 35, 35)
                                .addComponent(ClientPayload, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ClientConnect))
                            .addGroup(ClientjPanelLayout.createSequentialGroup()
                                .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ClientIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))))
                        .addGap(18, 18, 18)
                        .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CleintFolderPath, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(ClientFileName))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        ClientjPanelLayout.setVerticalGroup(
            ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientjPanelLayout.createSequentialGroup()
                .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientjPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3))
                    .addGroup(ClientjPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClientIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(ClientFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(CleintFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ClientjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClientPayload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(ClientConnect))))
                .addGap(18, 18, 18)
                .addComponent(ClientMessages, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Client", ClientjPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServerIPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerIPAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerIPAddressActionPerformed

    private void ServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerPortActionPerformed

    private void ClientConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientConnectActionPerformed
        // TODO add your handling code here:
            
        // The server's IP address and port, the name of the file and its path and the maximum payload of the file
        InetAddress address;
        int port;
        String fileName;
        String folderPath;
        int maxPayload;

        // If the user inputs less than 10 arguments or does not type the command according to the template
          if(ClientIPAddress.getText().equals("") || ClientPort.getText().equals("") || !ClientPort.getText().matches("-?\\d+") || ClientFileName.getText().equals("") || CleintFolderPath.getText().equals("") || ClientPayload.getText().equals("") || !ClientPayload.getText().matches("-?\\d+") ){
            jTextArea2.append("\nYou have to fill all the fields correctly!");
          }
          else{
            
            try
            {
                // Assign the arguments passed by the user to variables
                address = InetAddress.getByName(ClientIPAddress.getText());
                port = Integer.parseInt(ClientPort.getText());
                fileName = ClientFileName.getText();
                folderPath = CleintFolderPath.getText(); 
                maxPayload= Integer.parseInt(ClientPayload.getText());
                if(port > 0 && maxPayload > 0){
                   jTextArea2.append("\nLaunched Client");
                   
                // Initialize the client and print the details entered by its user
                  
                   port = 6661;
                   
                Client c = new Client();
                jTextArea2.append("\nServer IP: \"" + address + "\" and port: " + port + " will be used for UDP connections.");
                jTextArea2.append("\nFile: \"" + fileName + "\" from path: \"" + folderPath + "\" will be transferred.");
                jTextArea2.append("\nMaximum payload of UDP section is " + maxPayload + " bytes. \n");

                boolean test = c.connect(address, port);    // Try to connect to the server
                if (test)                                   // If the connection is successful
                {
                    c.startTime = System.nanoTime();        // Assign the starting time to a variable
                    jTextArea2.append("\nFile transfer begins.");
                    String path = folderPath + "/" + fileName;
                    c.sendFile(path, maxPayload);
                    c.endTime = System.nanoTime();          // Assign the finishing time to a variable
                    jTextArea2.append("\nFile transfer completed.\n");
                    c.statistics();
                } else
                    jTextArea2.append("\nServer Connection failed!");
                }
                else
                    jTextArea2.append("\nYou have to provide a postitive number to port and to payload");
            } catch (UnknownHostException uhe)
            {
                uhe.printStackTrace();
            } catch (IOException ioe)
            {
                ioe.printStackTrace();
            }
                  
          }
    
    }//GEN-LAST:event_ClientConnectActionPerformed
   
    private void ClientIPAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientIPAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientIPAddressActionPerformed

    private void ServerConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerConnectActionPerformed
        // TODO add your handling code here:
              
       // InetAddress temp = InetAddress.getByName(ServerIPAddress.getText());
        // If the user inputs less than 2 arguments or does not type the command according to the template
        if(ServerIPAddress.getText().equals("")  || ServerPort.getText().equals("") || !ServerPort.getText().matches("-?\\d+")){
                jTextArea1.append("\nYou have to provide an IP and a port in order the Server can begin");
         //   System.exit(0);
        }
        else{
         Thread t1 = new Thread(() -> {

            try
            {
                // Server's IP address and port used for UPD connections
                // Assign the IP address and port input to a variable
                
           //     final InetAddress address = InetAddress.getByName(ServerIPAddress.getText());
                final InetAddress address = InetAddress.getLocalHost();

              //  final int port = Integer.parseInt(ServerPort.getText());
                final int port = 6661;
                if(port > 0){
                   jTextArea1.append("\nLaunched Server");
                // Initialize the server and print its IP and port
                Server s = new Server(address, port);
                jTextArea1.append("Server IP: \"" + address + "\" and port: " + "*****" + " will be used for UDP connections.");

                boolean test = s.listen();  // The server is waiting for connections from clients
                if (test)                   // If the handshake is successful and a connection is established
                {
                    jTextArea1.append("Client connected\nFile transfer begins.");
                    s.receiveFile();
                    jTextArea1.append("File transfer completed.");
                }else
                    jTextArea1.append("Client connection failed.");
                }
                else
                    jTextArea1.append("\nYou have to provide a postitive number to port");
            } catch (UnknownHostException uhe)
            {
                uhe.printStackTrace();
            } catch (IOException ioe)
            {
                ioe.printStackTrace();
            }
         });
         t1.start();
        }
                
    }//GEN-LAST:event_ServerConnectActionPerformed

    private void ClientPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientPortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CleintFolderPath;
    private javax.swing.JButton ClientConnect;
    private javax.swing.JTextField ClientFileName;
    private javax.swing.JTextField ClientIPAddress;
    private javax.swing.JScrollPane ClientMessages;
    private javax.swing.JTextField ClientPayload;
    private javax.swing.JTextField ClientPort;
    private javax.swing.JPanel ClientjPanel;
    private javax.swing.JButton ServerConnect;
    private javax.swing.JTextField ServerIPAddress;
    private javax.swing.JScrollPane ServerMessages;
    private javax.swing.JTextField ServerPort;
    private javax.swing.JPanel ServerjPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
